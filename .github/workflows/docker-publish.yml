# .github/workflows/docker-image.yml

name: Build and Push Docker Images

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ github.repository }}
  DOCKER_BUILDKIT: 1

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      # --- Nova etapa: Limpeza de disco mais agressiva no runner ---
      - name: Aggressive Free disk space on runner
        run: |
          echo "--- Disk space BEFORE aggressive cleanup ---"
          df -h

          # Remove pacotes desnecessários e caches do apt
          sudo apt-get autoremove -y
          sudo apt-get clean
          sudo rm -rf /usr/share/dotnet # Remove SDKs .NET
          sudo rm -rf /usr/local/lib/android # Remove SDKs Android
          sudo rm -rf /opt/ghc # Remove Glasgow Haskell Compiler
          sudo rm -rf "/usr/local/share/boost" # Remove bibliotecas Boost
          sudo rm -rf /usr/share/swift # Remove Swift toolchain
          sudo rm -rf /usr/share/powershell # Remove PowerShell
          sudo rm -rf /usr/local/share/chromium # Remove Chromium cache
          sudo rm -rf /usr/local/.ghcup # Remove Haskell GHCup

          # Limpa o cache do Docker no runner
          sudo docker system prune --all --force --volumes
          sudo rm -rf /var/lib/docker/* # Garante a limpeza profunda do Docker

          echo "--- Disk space AFTER aggressive cleanup ---"
          df -h
      
      # --- Cache para dependências Pip (Python) ---
      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # --- Cache para dependências npm (Node.js) ---
      # Assumindo que você tem um package-lock.json ou yarn.lock na raiz do seu projeto
      - name: Cache npm dependencies
        uses: actions/setup-node@v4
        with:
          node-version: '20' # Ou a versão que você usa para npm
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json' # Ou '**/yarn.lock' se usar Yarn

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ github.ref_name }}
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'main') }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Check disk space after build
        run: df -h
